$ docker
- lista todos los comandos disponibles

$ docker image
- image es el comando q se usa para manejar a nuestras imagenes
- el comando PULL nos decarga una imagen de un repositorio o de un registro (docker hub)
-generar una imagen y correrla en un contenedor:
$ docker image pull <nombre de la imagen>
- este comando se conecta con docker hub e inicia la descarga
$ docker image ls
- vemos las imagenes descargadas

$ docker container
-para inspeccionar los contenedores, y nos lista todos los 
comandos disponibles.

$ docker container run
- genera un nuevo contendor a partir de una imagen
$ docker container run --help
- vemos todas las opciones q podemos pasarle y la estructura:
(Usage: docker container run [OPTIONS] IMAGE [COMMAND] [ARG...])
$ docker container run <nombre imagen>
- vemos el resultado
$ docker container ls 
- lista a los contenedores, si no hay ningun servicio corriendo
dentro del mismo no se verá nada

$ docker container ls --help
- lista todas las opciones disponibles

$ docker container ls -a
- muestra todos los contenedores si estan corriendo o apagados

$ docker container rm <id o nombre>
- elimina el contenedor 

$ docker container run <nombre de la imagen>
- para ejecutar un contenedor
- run consta de dos comandos:   - create : genera un nuevo contenedor
                                - start : inicia el contenedor
$ docker container create <imagen>
- me devuelve el id unico q docker asigna al container 
- con docker container ls -a veo los contenedores, y en status vemos
Created y en CREATED el tiempo q hace q se creó 
- una vez creado el contenedor lo iniciamos:
$ docker container start <id o nombre>
- si volvemos a ejecutar docker container ls -a veremos en 
status q el contenedor ha sido detenido (Exited)

SINTESIS:
run: genera contenedor
create: genera contenedor
start: iniciarlo
rm: eliminarlo
stop : detenerlo

DETENER UN CONTENEDOR:  stop/ prune
$ docker ps ( reviso los containers y obtengo el id) o con $ docker container ls
$ docker container stop <container id>
o $ docker container ls -q -> me devuelve el id de cada uno de  los containers activos
entonces para detenerlos a todos juntos->
$  docker container stop $(docker container ls -q)
$ docker container prune -> yes : remueve a todos los contenedores detenidos
